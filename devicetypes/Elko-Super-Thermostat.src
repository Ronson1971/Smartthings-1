/**
 *  Copyright 2015 SmartThings
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 *	Elko ESH Plus Super TR RF
 *
 *	Author: Nils-Martin Skaanes
 *	Date: 2017-23-08
 */
metadata {
	definition (name: "Elko Super Thermostat", namespace: "nilskaa@gmail.com", author: "Nils-Martin Skaanes") {
		capability "Temperature Measurement"
		capability "Thermostat"
		capability "Refresh"
        capability "Configuration"
        capability "powerMeter" 
       

        //raw: 01 0104 0301 00 03 0000 0003 0201 00
		fingerprint profileId: "0104", deviceId: "0301", inClusters: "0000, 0003, 0201", endpointId: "01"
	}

	// simulator metadata
	simulator { }

	tiles(scale: 2) {
    	multiAttributeTile(name:"ETS", type:"generic", width: 3, height: 2, canChangeIcon: true){
            tileAttribute("device.temperature", key: "PRIMARY_CONTROL") {
				attributeState "temperature", label:'${currentValue}°', unit:"C", backgroundColor:"#79b821"
			}
            tileAttribute("device.heatingSetpoint", key: "SLIDER_CONTROL", range: "(5..50)"){
				attributeState "heatingSetpoint", action:"thermostat.setHeatingSetpoint", backgroundColor:"#e86d13"
            }
            tileAttribute("device.temperatureMeasurement", key: "SECONDARY_CONTROL"){
				attributeState "temperatureMeasurement", label: '${currentValue}°' + ' air temperature', backgroundColor:"#e86d13"
            }
        }
		
        valueTile("power", "device.power", inactiveLabel: false, decoration: "flat", width: 4, height: 1) {
			state "default", label:'${currentValue} Watt', backgroundColor:"#ffffff"
		}
        standardTile("refresh", "device.refresh", inactiveLabel: false, decoration: "flat") {
			state "default", action:"refresh.refresh", icon:"st.secondary.refresh"
		}
        standardTile("configure", "device.configure", inactiveLabel: false, decoration: "flat") {
			state "configure", label:'', action:"configuration.configure", icon:"st.secondary.configure"
		}
		main "ETS"
		details(["ETS", "refresh", "power", "configure"])
	}
}

// parse events into attributes
def parse(String description) {
	log.debug "Parse description $description"
	List result = []
	def descMap = zigbee.parseDescriptionAsMap(description)
	log.debug "Desc Map: $descMap"
	List attrData = [[cluster: descMap.cluster ,attrId: descMap.attrId, value: descMap.value]]
	descMap.additionalAttrs.each {
	    attrData << [cluster: descMap.cluster, attrId: it.attrId, value: it.value]
	}
	attrData.each {
		def map = [:]
        if (it.cluster == "0201" && it.attrId == "0403") {
            log.debug "CONFIG - Temperature sensor value=$it.value"
			//map.name = "temperature"
			state.tempsensor = it.value
			//map.unit = temperatureScale
        } else if (it.cluster == "0201" && it.attrId == "0000" && state.tempsensor == "00") {
			log.debug "MEASURED AIR TEMPERATURE - air sensor mode"
			map.name = "temperature"
			map.value = getTemperature(it.value)
			map.unit = temperatureScale
		} else if (it.cluster == "0201" && it.attrId == "0000" && state.tempsensor == "01") {
			log.debug "MEASURED AIR TEMPERATURE - floor sensor mode"
			map.name = "temperatureMeasurement"
			map.value = getTemperature(it.value)
			map.unit = temperatureScale
		} else if (it.cluster == "0201" && it.attrId == "0012") {
			log.debug "HEATING SETPOINT"
			map.name = "heatingSetpoint"
			map.value = getTemperature(it.value)
			map.unit = temperatureScale
		} else if (it.cluster == "0201" && it.attrId == "0409" && state.tempsensor == "01") {
			log.debug "MEASURED FLOOR TEMPERATURE - floor sensor mode"
			map.name = "temperature"
			map.value = getTemperature(it.value)
			map.unit = temperatureScale
        } else if (it.cluster == "0201" && it.attrId == "0408") {
			log.debug "POWER"
			map.name = "power"
            map.value = zigbee.convertHexToInt(it.value) 
        } 
		if (map) {
			result << createEvent(map)
		}
		log.debug "Parse returned $map"
	}
	return result
}

def refresh() 
{
     log.debug "sending refresh command"
     def cmd = []
     cmd << "st rattr 0x${device.deviceNetworkId} 0x01 0x0201 0x0000"  // temp sensor på endpoint 1
     cmd << "delay 150"
     cmd << "st rattr 0x${device.deviceNetworkId} 0x01 0x0201 0x0012"  // Heating setpoint    
     cmd << "delay 150"
     cmd << "st rattr 0x${device.deviceNetworkId} 0x01 0x0201 0x409"  // testing  
     cmd << "delay 150"
     cmd << "st rattr 0x${device.deviceNetworkId} 0x01 0x0201 0x408"  // power consumption?
} 

def poll() {
	log.debug "Executing poll"
	refresh()
}

def getTemperature(value) {
	if (value != null) {
		def celsius = Integer.parseInt(value, 16) / 100
		if (getTemperatureScale() == "C") {
			return celsius
		} else {
			return Math.round(celsiusToFahrenheit(celsius))
		}
	}
}

def setHeatingSetpoint(degrees) {
	if (degrees != null) {
		def temperatureScale = getTemperatureScale()

		def degreesInteger = Math.round(degrees)
		log.debug "setHeatingSetpoint({$degreesInteger} ${temperatureScale})"
		sendEvent("name": "heatingSetpoint", "value": degreesInteger, "unit": temperatureScale)

		def celsius = (getTemperatureScale() == "C") ? degreesInteger : (fahrenheitToCelsius(degreesInteger) as Double).round(2)
		"st wattr 0x${device.deviceNetworkId} 1 0x201 0x12 0x29 {" + hex(celsius * 100) + "}"
	}
}

def configure() {
    log.debug "binding to Thermostat cluster"
	[
	 "zdo bind 0x${device.deviceNetworkId} 1 1 0x201 {${device.zigbeeId}} {}"
    ] 
    
    log.debug  "set up reporting of temperature change"
	[
     zigbee.configureReporting(0x0201, 0x0000, 0x29, 30, 3600, 0x000A) +
     zigbee.configureReporting(0x0201, 0x409, 0x29, 30, 3600, 0x000A) +
     zigbee.configureReporting(0x0201, 0x408, 0x21, 30, 3600, 0x0005)  
    ] 
    
    log.debug  "Read temp sensor attribute. Stored to state in parse()"
    [
     zigbee.readAttribute(0x0201, 0x403)
    ]
} 

private hex(value) {
	new BigInteger(Math.round(value).toString()).toString(16)
}
